name: Test, Static Analysis, and Containerization

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - "crates/**"
      - "src/**"
      - "proto/**"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "Dockerfile"
      - ".github/workflows/containerize.yaml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Print teams
        run: |
          curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/user/repos

      # Tool installation
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          override: true
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1
      - name: Install SQLx
        run: cargo install sqlx-cli
        id: sqlx-install

      # Run migrations, if any

      - name: Run SQLx migration
        run: sqlx migrate run
        id: sqlx-migration
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # Run Tests

      - name: Test
        run: cargo test
        id: test
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}

      # Static Analysis

      - run: cargo audit --ignore RUSTSEC-2020-0071
      - run: SQLX_OFFLINE=true cargo clippy --all-targets --all-features --workspace --no-deps -- -D warnings -A clippy::extra-unused-lifetimes -A clippy::derive_partial_eq_without_eq
      - run: cargo fmt --all -- --check

      # Containerize

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata and create fabriq-api-{sha} tag
        id: api_meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
          tags: |
            type=sha,prefix=,format=long
      - name: Extract metadata and create fabriq-gitops-{sha} tag
        id: gitops_meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gitops
          tags: |
            type=sha,prefix=,format=long
      - name: Build and Push Docker API image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        id: api_build
        with:
          context: .
          file: Dockerfile
          target: api
          push: true
          tags: ${{ steps.api_meta.outputs.tags }}
          labels: ${{ steps.api_meta.outputs.labels }}
      - name: Build and Push Docker Gitops image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        id: gitops_build
        with:
          context: .
          file: Dockerfile
          target: gitops
          push: true
          tags: ${{ steps.gitops_meta.outputs.tags }}
          labels: ${{ steps.gitops_meta.outputs.labels }}

      - uses: robinraju/release-downloader@v1.6
        with:
          repository: "fabriq-cloud/fabriq"
          latest: true
          fileName: "fabriq"
      - name: Update api and gitops image config for this branch's deployment
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          GIT_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}

          chmod +x fabriq

          ./fabriq login ${{ secrets.GITHUB_TOKEN }}

          ./fabriq config create --deployment ${{ github.repository }}/api/$GIT_BRANCH image ${{ steps.api_meta.outputs.tags }}
          ./fabriq config create --deployment ${{ github.repository }}/gitops/$GIT_BRANCH image ${{ steps.gitops_meta.outputs.tags }}
